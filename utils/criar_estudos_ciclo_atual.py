"""
Script para criar estudos atuais no ciclo atual para demonstra√ß√£o
"""

import sys
import os
import django

# Configurar Django
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')
django.setup()

from django.contrib.auth.models import User
from contact.models import (
    Contact, EstudoAtual, HistoricoEstudo, Livro, CategoriaLivro,
    ConfiguracaoEstatisticas
)
from django.utils import timezone
from datetime import datetime, timedelta
import random


def criar_estudos_ciclo_atual(username='alef'):
    """
    Cria estudos atuais no ciclo atual para demonstrar as novas funcionalidades
    """
    try:
        # Buscar usu√°rio
        try:
            user = User.objects.get(username=username)
        except User.DoesNotExist:
            user = User.objects.first()
            
        if not user:
            print("‚ùå Nenhum usu√°rio encontrado")
            return
            
        print(f"üîç Trabalhando com usu√°rio: {user.username}")
        
        # Buscar configura√ß√£o para calcular per√≠odo do ciclo atual
        configuracao = ConfiguracaoEstatisticas.objects.filter(owner=user).first()
        if not configuracao:
            print("‚ùå Configura√ß√£o n√£o encontrada")
            return
            
        # Calcular datas do ciclo atual
        ciclo_info = configuracao.calcular_ciclo_atual()
        data_inicio_ciclo = ciclo_info['inicio']
        data_fim_ciclo = ciclo_info['fim']
        
        print(f"üìÖ Ciclo atual: {ciclo_info['numero']} ({data_inicio_ciclo} at√© {data_fim_ciclo})")
        
        # Verificar se temos datas v√°lidas
        if not data_inicio_ciclo or not data_fim_ciclo:
            print("‚ùå Datas do ciclo n√£o s√£o v√°lidas")
            return
        
        # Buscar contatos e livros dispon√≠veis
        contatos = Contact.objects.filter(owner=user)[:10]  # Pegar at√© 10 contatos
        livros = Livro.objects.filter(ativo=True)[:5]  # Pegar at√© 5 livros
        
        if not contatos.exists():
            print("‚ùå Nenhum contato encontrado")
            return
            
        if not livros.exists():
            print("‚ùå Nenhum livro encontrado")
            return
            
        print(f"üë• Contatos dispon√≠veis: {contatos.count()}")
        print(f"üìö Livros dispon√≠veis: {livros.count()}")
        
        estudos_criados = 0
        estudos_concluidos = 0
        
        # Criar estudos atuais no per√≠odo do ciclo atual
        for i in range(8):  # Criar 8 estudos no ciclo atual
            contato = random.choice(contatos)
            livro = random.choice(livros)
            
            # Verificar se j√° existe estudo deste livro para este contato
            if EstudoAtual.objects.filter(contato=contato, livro=livro).exists():
                continue
                
            # Criar data dentro do per√≠odo do ciclo atual
            dias_ciclo = (data_fim_ciclo - data_inicio_ciclo).days
            dias_random = random.randint(0, dias_ciclo)
            data_criacao = data_inicio_ciclo + timedelta(days=dias_random)
            
            # Criar estudo atual
            estudo = EstudoAtual.objects.create(
                contato=contato,
                livro=livro,
                status='em_andamento',
                data_inicio=data_criacao,
                observacoes=f'Estudo criado para demonstra√ß√£o no ciclo {ciclo_info["numero"]}'
            )
            
            # Ajustar a data de cria√ß√£o para o per√≠odo do ciclo
            estudo.created_at = timezone.make_aware(
                datetime.combine(data_criacao, datetime.min.time())
            )
            estudo.save()
            
            estudos_criados += 1
            print(f"‚úÖ Criado estudo: {contato.first_name} - {livro}")
        
        # Criar alguns estudos conclu√≠dos no ciclo atual
        for i in range(3):  # Criar 3 estudos conclu√≠dos
            contato = random.choice(contatos)
            livro = random.choice(livros)
            
            # Verificar se j√° existe hist√≥rico deste livro para este contato
            if HistoricoEstudo.objects.filter(contato=contato, livro=livro).exists():
                continue
                
            # Criar data dentro do per√≠odo do ciclo atual
            dias_ciclo = (data_fim_ciclo - data_inicio_ciclo).days
            dias_random = random.randint(0, dias_ciclo)
            data_criacao = data_inicio_ciclo + timedelta(days=dias_random)
            
            # Criar hist√≥rico de estudo conclu√≠do
            historico = HistoricoEstudo.objects.create(
                contato=contato,
                livro=livro,
                status='concluido',
                data_inicio=data_criacao,
                data_termino=data_criacao + timedelta(days=random.randint(30, 90)),
                observacoes=f'Estudo conclu√≠do no ciclo {ciclo_info["numero"]}'
            )
            
            # Ajustar a data de cria√ß√£o para o per√≠odo do ciclo
            historico.created_at = timezone.make_aware(
                datetime.combine(data_criacao, datetime.min.time())
            )
            historico.save()
            
            estudos_concluidos += 1
            print(f"‚úÖ Criado estudo conclu√≠do: {contato.first_name} - {livro}")
        
        print(f"""
üìä RESUMO:
   ‚Ä¢ Estudos atuais criados: {estudos_criados}
   ‚Ä¢ Estudos conclu√≠dos criados: {estudos_concluidos}
   ‚Ä¢ Total de atividades no ciclo: {estudos_criados + estudos_concluidos}
   
üéØ Agora voc√™ pode acessar o dashboard para ver as atividades novas do ciclo atual!
        """)
        
    except Exception as e:
        print(f"‚ùå Erro ao criar estudos: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    criar_estudos_ciclo_atual()